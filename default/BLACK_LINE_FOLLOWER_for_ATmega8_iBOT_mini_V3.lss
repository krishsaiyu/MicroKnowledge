
BLACK_LINE_FOLLOWER_for_ATmega8_iBOT_mini_V3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000146  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000304  00000000  00000000  000001d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000111  00000000  00000000  000004d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002e2  00000000  00000000  000005ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000008cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000111  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000228  00000000  00000000  000009fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  00000c25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	86 c0       	rjmp	.+268    	; 0x142 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:

#include<avr/io.h>
#include<util/delay.h>

void main()
{
  38:	1f 93       	push	r17
  3a:	cf 93       	push	r28
  3c:	df 93       	push	r29
	DDRD=0b11111111;  // set PD4 as output bit
  3e:	8f ef       	ldi	r24, 0xFF	; 255
  40:	81 bb       	out	0x11, r24	; 17
	DDRC=0b0000000;   // set PORTC as input port
  42:	14 ba       	out	0x14, r1	; 20
	DDRB=0b00011110;  // PB1, PB2, PB3, PB4 as output port
  44:	8e e1       	ldi	r24, 0x1E	; 30
  46:	87 bb       	out	0x17, r24	; 23
	ls=(PINC&0b0001000);    // acquire only right sensor status connected at PC3
	PORTD = ~PORTD;		
		
		if((rs==0b0000001)||(ls==0b0001000)) 
		{
		PORTD=(1<<4);
  48:	a0 e1       	ldi	r26, 0x10	; 16
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  4a:	69 e1       	ldi	r22, 0x19	; 25
  4c:	70 e0       	ldi	r23, 0x00	; 0
	
		

        if((rs==0b0000001)&&(ls==0b0001000) ) // check sensor status for both sensor ON 
		{  
		     	PORTB=0b00010010;
  4e:	12 e1       	ldi	r17, 0x12	; 18
  50:	c8 ea       	ldi	r28, 0xA8	; 168
  52:	d1 e6       	ldi	r29, 0x61	; 97
		if((rs==0b0000000)&(ls==0b0001000))  //check sensor status for left sensor=OFF and
		                                     // right sensor=ON
		{
PORTB=0b00000000;
			_delay_ms(500);  			
					PORTB=0b00000010;
  54:	b2 e0       	ldi	r27, 0x02	; 2
					       // status in rs 
	
	while(1)          // create infinite loop
	{
	
	rs=(PINC&0b0000001);    // acquire only left sensor status connected at PC0
  56:	83 b3       	in	r24, 0x13	; 19
  58:	90 e0       	ldi	r25, 0x00	; 0
	ls=(PINC&0b0001000);    // acquire only right sensor status connected at PC3
  5a:	23 b3       	in	r18, 0x13	; 19
  5c:	42 2f       	mov	r20, r18
  5e:	50 e0       	ldi	r21, 0x00	; 0
  60:	48 70       	andi	r20, 0x08	; 8
  62:	50 70       	andi	r21, 0x00	; 0
	PORTD = ~PORTD;		
  64:	22 b3       	in	r18, 0x12	; 18
  66:	20 95       	com	r18
  68:	22 bb       	out	0x12, r18	; 18
		
		if((rs==0b0000001)||(ls==0b0001000)) 
  6a:	9c 01       	movw	r18, r24
  6c:	21 70       	andi	r18, 0x01	; 1
  6e:	30 70       	andi	r19, 0x00	; 0
  70:	80 fd       	sbrc	r24, 0
  72:	03 c0       	rjmp	.+6      	; 0x7a <__SREG__+0x3b>
  74:	48 30       	cpi	r20, 0x08	; 8
  76:	51 05       	cpc	r21, r1
  78:	21 f4       	brne	.+8      	; 0x82 <__SREG__+0x43>
		{
		PORTD=(1<<4);
  7a:	a2 bb       	out	0x12, r26	; 18
		}

		if((rs==0b0000000)&&(ls==0b0000000)) // check sensor status for both sensor OFF 
  7c:	21 15       	cp	r18, r1
  7e:	31 05       	cpc	r19, r1
  80:	b1 f4       	brne	.+44     	; 0xae <__SREG__+0x6f>
  82:	41 15       	cp	r20, r1
  84:	51 05       	cpc	r21, r1
  86:	89 f4       	brne	.+34     	; 0xaa <__SREG__+0x6b>
		{

			PORTB=0b00000000;
  88:	18 ba       	out	0x18, r1	; 24
  8a:	80 e1       	ldi	r24, 0x10	; 16
  8c:	97 e2       	ldi	r25, 0x27	; 39
  8e:	fb 01       	movw	r30, r22
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <__SREG__+0x51>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  94:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  96:	d9 f7       	brne	.-10     	; 0x8e <__SREG__+0x4f>
			_delay_ms(1000);  
			PORTB=0b00000000;
  98:	18 ba       	out	0x18, r1	; 24
  9a:	80 e1       	ldi	r24, 0x10	; 16
  9c:	97 e2       	ldi	r25, 0x27	; 39
  9e:	fb 01       	movw	r30, r22
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <__SREG__+0x61>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a6:	d9 f7       	brne	.-10     	; 0x9e <__SREG__+0x5f>
			_delay_ms(1000);     //turn left
			PORTD =(1<<4);
  a8:	a2 bb       	out	0x12, r26	; 18
  aa:	20 e0       	ldi	r18, 0x00	; 0
  ac:	30 e0       	ldi	r19, 0x00	; 0
			ls=0;                 // set sensor status off
			rs=0; 				  // set sensor status off
			
		}

		if((rs==0b0000001)&(ls==0b0000000))  // check sensor status for left sensor=ON and
  ae:	21 30       	cpi	r18, 0x01	; 1
  b0:	31 05       	cpc	r19, r1
  b2:	c1 f4       	brne	.+48     	; 0xe4 <__SREG__+0xa5>
  b4:	41 15       	cp	r20, r1
  b6:	51 05       	cpc	r21, r1
  b8:	a9 f4       	brne	.+42     	; 0xe4 <__SREG__+0xa5>
		                                     // right sensor=OFF
		{PORTB=0b00000000;
  ba:	18 ba       	out	0x18, r1	; 24
  bc:	80 e1       	ldi	r24, 0x10	; 16
  be:	97 e2       	ldi	r25, 0x27	; 39
  c0:	fb 01       	movw	r30, r22
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <__SREG__+0x83>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__SREG__+0x81>
			_delay_ms(1000);  			
			PORTB=0b00010000;
  ca:	a8 bb       	out	0x18, r26	; 24
  cc:	80 e1       	ldi	r24, 0x10	; 16
  ce:	97 e2       	ldi	r25, 0x27	; 39
  d0:	fb 01       	movw	r30, r22
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <__SREG__+0x93>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d8:	d9 f7       	brne	.-10     	; 0xd0 <__SREG__+0x91>
			_delay_ms(1000);    // turn right
			PORTD =(1<<4);
  da:	a2 bb       	out	0x12, r26	; 18
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	50 e0       	ldi	r21, 0x00	; 0
  e0:	20 e0       	ldi	r18, 0x00	; 0
  e2:	30 e0       	ldi	r19, 0x00	; 0
			rs=0; 				 // set sensor status off
				            
		}
	
	
		if((rs==0b0000000)&(ls==0b0001000))  //check sensor status for left sensor=OFF and
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	48 30       	cpi	r20, 0x08	; 8
  e8:	51 05       	cpc	r21, r1
  ea:	09 f4       	brne	.+2      	; 0xee <__SREG__+0xaf>
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	21 15       	cp	r18, r1
  f0:	31 05       	cpc	r19, r1
  f2:	a1 f4       	brne	.+40     	; 0x11c <__SREG__+0xdd>
  f4:	88 23       	and	r24, r24
  f6:	91 f0       	breq	.+36     	; 0x11c <__SREG__+0xdd>
		                                     // right sensor=ON
		{
PORTB=0b00000000;
  f8:	18 ba       	out	0x18, r1	; 24
  fa:	88 e8       	ldi	r24, 0x88	; 136
  fc:	93 e1       	ldi	r25, 0x13	; 19
  fe:	fb 01       	movw	r30, r22
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <__SREG__+0xc1>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 104:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 106:	d9 f7       	brne	.-10     	; 0xfe <__SREG__+0xbf>
			_delay_ms(500);  			
					PORTB=0b00000010;
 108:	b8 bb       	out	0x18, r27	; 24
 10a:	80 e1       	ldi	r24, 0x10	; 16
 10c:	97 e2       	ldi	r25, 0x27	; 39
 10e:	fb 01       	movw	r30, r22
 110:	31 97       	sbiw	r30, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <__SREG__+0xd1>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 114:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 116:	d9 f7       	brne	.-10     	; 0x10e <__SREG__+0xcf>
			_delay_ms(1000);     //turn left
			PORTD =(1<<4);
 118:	a2 bb       	out	0x12, r26	; 18
 11a:	9d cf       	rjmp	.-198    	; 0x56 <__SREG__+0x17>
			 
		}
	
		

        if((rs==0b0000001)&&(ls==0b0001000) ) // check sensor status for both sensor ON 
 11c:	21 30       	cpi	r18, 0x01	; 1
 11e:	31 05       	cpc	r19, r1
 120:	09 f0       	breq	.+2      	; 0x124 <__SREG__+0xe5>
 122:	99 cf       	rjmp	.-206    	; 0x56 <__SREG__+0x17>
 124:	88 23       	and	r24, r24
 126:	09 f4       	brne	.+2      	; 0x12a <__SREG__+0xeb>
 128:	96 cf       	rjmp	.-212    	; 0x56 <__SREG__+0x17>
		{  
		     	PORTB=0b00010010;
 12a:	18 bb       	out	0x18, r17	; 24
 12c:	ce 01       	movw	r24, r28
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <__SREG__+0xef>
		_delay_ms(100);
		PORTB=0b00000000;
 132:	18 ba       	out	0x18, r1	; 24
 134:	ce 01       	movw	r24, r28
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <__SREG__+0xf7>
		_delay_ms(100);
		       //move forward
			PORTD =~PORTD;     
 13a:	82 b3       	in	r24, 0x12	; 18
 13c:	80 95       	com	r24
 13e:	82 bb       	out	0x12, r24	; 18
 140:	8a cf       	rjmp	.-236    	; 0x56 <__SREG__+0x17>

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
